#!/bin/bash

usage ()
{
  if [ -n "$1" ]
  then
    echo $*
  fi
  prog="`basename $0`"
  echo "${prog}: move java source files from one package to another"
  echo "usage: ${prog} <directory> <old-package> <new-package>"
  exit 1
}

if [ -z "$3" ]
then
  usage
fi

if [ -z "${TMP}" ]
then
  export TMP=/tmp
fi

if [ ! -d "${TMP}" ]
then
  echo "Error: could not find usable tmp directory"
  echo "  Set TMP environment variable and re-run"
  usage
fi

root=$1
old=$2
new=$3

cd ${root} 2>/dev/null || usage "Error: could not cd to root directory ${root}"

dogit=0

gitroot=`git rev-parse --show-toplevel 2>/dev/null`
if [ -n "${gitroot}" ]
then
  dogit=1
  # Else, assume that the original command already gave a suitable
  # error message, so we just exit "silently"
fi

# `old' and `new' could be separated by either dots or slashes.
# We allow it either way.  First, though, we want to work with
# slashes, so we convert any dots to slashes, while leaving any
# slashes alone.

olddir=`echo ${old} | tr '.' '/'`
newdir=`echo ${new} | tr '.' '/'`

if [ "${dogit}" = "1" ]
then
  files=`git ls-files`
else
  files=`find . -type f`
fi

for file in ${files}
do
  oldloc=`dirname $file`
  newloc=`echo $oldloc | sed "s,${olddir},${newdir},g"`
  if [ "${oldloc}" != "${newloc}" ]
  then
    /bin/mkdir -p ${newloc}
    # echo "moving ${file} into ${newloc}"
    if [ "${dogit}" = "1" ]
    then
      git mv -f ${file} ${newloc}/
    else
      /bin/mv ${file} ${newloc}/
      /bin/rmdir -p ${oldloc}
    fi
  fi
done

# Now we re-obtain the list of files, because some of them
# have presumably been moved
if [ "${dogit}" = "1" ]
then
  files=`git ls-files`
else
  files=`find . -type f`
fi

outfile=${TMP}/outfile.tmp
/bin/rm -f ${outfile}

diff_file=${TMP}/diff.diff
/bin/rm -f ${diff_file}

# Now we want to work with dots, not slashes.  Convert dots to slashes,
# and leave slashes alone.

oldregex=`echo ${old} | tr '/' '.' | sed 's,\.,\\\\.,g'`
newpack=`echo ${new} | tr '/' '.'`

for file in ${files}
do
  # sed "s,\([^.]\)${oldregex},\1${newpack},g" ${file} > ${outfile}
  sed "s,${oldregex},${newpack},g" ${file} > ${outfile}
  /usr/bin/touch -r ${file} ${outfile}

  # Finished with transformations
  if diff ${file} ${outfile} > ${diff_file} 2>&1
  then
    # echo "No diffs between ${file} and ${outfile}"
    /bin/rm -f ${outfile}
  else
    if egrep '^Binary files' ${diff_file} > /dev/null
    then
      echo "${file} is binary, not transforming it"
      /bin/rm -f ${outfile}
    else
      # echo "transforming ${file}"
      /bin/mv ${outfile} ${file}

      suffix=${file##*.}
      if [ "${suffix}" = "sh" ]
      then
        chmod 755 ${file}
      fi
    fi
  fi
  /bin/rm -f ${diff_file}
done
